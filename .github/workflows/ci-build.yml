name: Build Redis DIY

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Version'
        required: true
        default: "6.2.13"
        type: string
      make_latest:
        description: 'Latest'
        default: false
        type: boolean
      prerelease:
        description: 'Pre-release'
        default: false
        type: boolean
        
jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; 
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; 
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install WiX Toolset
        run: choco install wixtoolset -y

      - name: Download source code
        run: |
          $tag_name="${{ inputs.tag_name }}"
          (ConvertFrom-Json(Invoke-WebRequest -Headers @{'Authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}'} -Uri "https://api.github.com/repos/redis/redis/releases/tags/$($tag_name.Trim())").Content).body -Replace '\#1', 'https://github.com/redis/redis/pull/1' | Set-Content .\redis_latest_body.txt
          Invoke-WebRequest -Uri https://github.com/redis/redis/archive/refs/tags/$($tag_name.Trim()).tar.gz -OutFile redis-$($tag_name.Trim()).tar.gz
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_VERSION=$($tag_name.Trim())"
          Add-Content -Path $env:GITHUB_ENV -Value "REDIS_DIST=Redis-$($tag_name.Trim())-Windows-x64"

      - name: Setup dotnet
        if: ${{ success() }}
        uses: actions/setup-dotnet@v4
      - run: |
          dotnet publish -c Release -r win-x64 --sc


      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: gcc make pkg-config libopenssl openssl-devel zip
          
      - name: msys2 Build Redis
        if: ${{ success() }}
        run: |
          workspace=$(pwd)
          mkdir ${{ env.REDIS_DIST }}-msys2
          sed -i 's/__GNU_VISIBLE/1/' /usr/include/dlfcn.h
          tar -xzf redis-${{ env.RELEASE_VERSION }}.tar.gz
          cd redis-${{ env.RELEASE_VERSION }}/src && ./mkreleasehdr.sh
          sed -i 's/\"\;/\"/' asciilogo.h
          echo '" Redis for Windows Project Home \n"' >> asciilogo.h
          echo '" https://github.com/redis-windows/redis-windows  \n\n";' >> asciilogo.h
          cd ..
          make BUILD_TLS=yes CFLAGS="-Wno-char-subscripts -O0"
          find . -mindepth 1 -maxdepth 2 -type f -regex '.*\(\.exe\|\.conf\)' -exec cp -f "{}" "$workspace/${{ env.REDIS_DIST }}-msys2" \;
          cd $workspace
          cp README.md README.zh_CN.md start.bat /usr/bin/msys-2.0.dll /usr/bin/msys-crypto-3.dll /usr/bin/msys-ssl-3.dll ${{ env.REDIS_DIST }}-msys2
          sed -i 's/pidfile \/var\/run/pidfile ./' ${{ env.REDIS_DIST }}-msys2/redis.conf
          zip -q -r ${{ env.REDIS_DIST }}-msys2.zip ${{ env.REDIS_DIST }}-msys2
          cp install_redis_service.bat uninstall_redis_service.bat publish/* ${{ env.REDIS_DIST }}-msys2/
          mv ${{ env.REDIS_DIST }}-msys2 ${{ env.REDIS_DIST }}-msys2-with-Service
          zip -q -r ${{ env.REDIS_DIST }}-msys2-with-Service.zip ${{ env.REDIS_DIST }}-msys2-with-Service
        shell: msys2 {0}

      - uses: cygwin/cygwin-install-action@master
        with:
          packages: make gcc-core pkg-config libssl-devel zip

      - name: cygwin Build Redis
        env:
          CYGWIN_NOWINPATH: 1
        if: ${{ success() }}
        run: >-
          workspace=$(pwd) ;
          mkdir ${{ env.REDIS_DIST }}-cygwin ;
          sed -i 's/__GNU_VISIBLE/1/' /usr/include/dlfcn.h ;
          rm -rf redis-${{ env.RELEASE_VERSION }} && tar -xzf redis-${{ env.RELEASE_VERSION }}.tar.gz ;
          cd redis-${{ env.RELEASE_VERSION }}/src && ./mkreleasehdr.sh ;
          sed -i 's/\"\;/\"/' asciilogo.h ;
          echo '" Redis for Windows Project Home \n"' >> asciilogo.h ;
          echo '" https://github.com/redis-windows/redis-windows  \n\n";' >> asciilogo.h ;
          cd .. ;
          make BUILD_TLS=yes CFLAGS="-Wno-char-subscripts -O0" ;
          find . -mindepth 1 -maxdepth 2 -type f -regex '.*\(\.exe\|\.conf\)' -exec cp -f "{}" "$workspace/${{ env.REDIS_DIST }}-cygwin" \; ;
          cd $workspace ;
          cp README.md README.zh_CN.md start.bat /bin/cygcrypto-3.dll /bin/cygwin1.dll /bin/cygssl-3.dll /bin/cygz.dll ${{ env.REDIS_DIST }}-cygwin ;
          sed -i 's/pidfile \/var\/run/pidfile ./' ${{ env.REDIS_DIST }}-cygwin/redis.conf ;
          zip -q -r ${{ env.REDIS_DIST }}-cygwin.zip ${{ env.REDIS_DIST }}-cygwin ;
          cp install_redis_service.bat uninstall_redis_service.bat publish/* ${{ env.REDIS_DIST }}-cygwin/ ;
          mv ${{ env.REDIS_DIST }}-cygwin ${{ env.REDIS_DIST }}-cygwin-with-Service ;
          zip -q -r ${{ env.REDIS_DIST }}-cygwin-with-Service.zip ${{ env.REDIS_DIST }}-cygwin-with-Service
        shell: bash

      - name: Create MSI Installer
        run: |
          candle.exe -dSourceDir=${{ env.REDIS_DIST }}-cygwin-with-Service redis.wxs
          light.exe redis.wixobj -o redis-${{ env.RELEASE_VERSION }}.msi
        shell: powershell

      - name: Release
        if: ${{ success() }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Redis ${{ env.RELEASE_VERSION }} for Windows
          tag_name: ${{ env.RELEASE_VERSION }}
          body_path: redis_latest_body.txt
          make_latest: ${{ inputs.make_latest }}
          prerelease: ${{ inputs.prerelease }}
          files: |
            ${{ env.REDIS_DIST }}-cygwin.zip
            ${{ env.REDIS_DIST }}-cygwin-with-Service.zip
            redis-${{ env.RELEASE_VERSION }}.msi
